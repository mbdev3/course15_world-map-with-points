(function (React$1, ReactDOM, d3, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl =
    'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);
    // console.log(data);
    React$1.useEffect(() => {
      d3.json(jsonUrl).then((topology) => {
        const {countries,land} = topology.objects;
        setData({land:topojson.feature(topology, land),
                interiors:topojson.mesh(topology,countries,(a,b)=>a!==b)});
      });
    }, []);
    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/curran/13d30e855d48cdd6f22acdf0afe27286/raw/0635f14817ec634833bb904a47594cc2f5f9dbf8/worldcities_clean.csv';

  const row = d => {
    d.lat = +d.lat;
    d.lng = +d.lng;
    d.population = +d.population;
    return d;
  };

  const useCities = () => {
    const [data, setData] = React$1.useState(null);
   // console.log(data);
    React$1.useEffect(() => {
      d3.csv(csvUrl,row).then(setData);
    }, []);
    return data;
  };

  const projection = d3.geoNaturalEarth1();
  const path = d3.geoPath(projection);
  const graticule = d3.geoGraticule();
  const Marks = ({
    worldAtlas: { land, interiors },
    cities,sizeScale,sizeValue
  }) => (
    React.createElement( 'g', { className: "mark" },
      React.createElement( 'path', {
        className: "sphere", d: path({ type: 'Sphere' }) }),
      React.createElement( 'path', {
        className: "graticules", d: path(graticule()) }),
      land.features.map((feature) => (
        React.createElement( 'path', { className: "land", d: path(feature) })
      )),
      cities.map((city) => {
        const [x, y] = projection([
          city.lng,
          city.lat,
        ]);

        return(
        React.createElement( 'circle', { className: 'cities', cx: x, cy: y, r: sizeScale(sizeValue(city)) }))
      }),
      React.createElement( 'path', {
        className: "interiors", d: path(interiors) })
      
    )
  );

  const width = window.innerWidth;
  const height = window.innerHeight;


  const App = () => {
    const worldAtlas = useWorldAtlas();
     const cities = useCities();
   
    if (!worldAtlas || !cities ) {
      return React$1__default.createElement( 'pre', null, "loading.." );
    }
    const sizeValue = d => d.population;
    const maxRadius = 15;
  const sizeScale = d3.scaleSqrt().domain([0,d3.max(cities,sizeValue)]).range([0,maxRadius]);
  console.log(typeof(sizeValue(cities[0])));  
  return (
      React$1__default.createElement( 'svg', { width: width, height: height },
       
          
          
          React$1__default.createElement( Marks, {
            worldAtlas: worldAtlas, cities: cities, sizeScale: sizeScale, sizeValue: sizeValue })
       		
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,